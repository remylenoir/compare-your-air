{"version":3,"sources":["Store.js","services/airquality.js","components/Search/Input.js","components/Location/Card.js","App.js","services/serviceWorker.js","index.js"],"names":["DataContext","createContext","SearchContext","SelectionContext","Store","_ref","children","_useState","useState","input","results","_useState2","Object","slicedToArray","search","setSearch","_useState3","locations","_useState4","selection","setSelection","_useState5","_useState6","data","setData","react_default","a","createElement","Provider","value","getData","asyncToGenerator","regenerator_default","mark","_callee","countryISO","limit","response","wrap","_context","prev","next","axios","get","concat","sent","abrupt","t0","console","error","stop","_x","_x2","apply","this","arguments","SearchInput","_useContext","useContext","_useContext3","_useContext4","_useContext5","_useContext6","Fragment","className","type","placeholder","onChange","event","target","map","element","location","length","filter","toLowerCase","slice","includes","index","key","onClick","selected","find","objectSpread","setTimeout","toConsumableArray","openCard","renderResults","LocationCard","_useContext2","filteredSelection","closeCard","moment","measurements","lastUpdated","fromNow","city","parameter","App","useEffect","then","catch","Input","Card","Boolean","window","hostname","match","ReactDOM","render","src_Store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8815f698.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\n// Create and export the Contexts\nexport const DataContext = createContext();\nexport const SearchContext = createContext();\nexport const SelectionContext = createContext();\n\nconst Store = ({ children }) => {\n  const [search, setSearch] = useState({\n    input: '',\n    results: []\n  });\n\n  const [selection, setSelection] = useState({\n    locations: []\n  });\n\n  const [data, setData] = useState({\n    locations: []\n  });\n\n  return (\n    // The application is wrapped by the Providers\n    <SearchContext.Provider value={[search, setSearch]}>\n      <SelectionContext.Provider value={[selection, setSelection]}>\n        <DataContext.Provider value={[data, setData]}>{children}</DataContext.Provider>\n      </SelectionContext.Provider>\n    </SearchContext.Provider>\n  );\n};\n\nexport default Store;\n","// External packages\nimport axios from 'axios';\n\nconst getData = async (countryISO, limit) => {\n  try {\n    const response = await axios.get(\n      `https://api.openaq.org/v1/latest?country=${countryISO}&limit=${limit}`\n    );\n    return response.data.results;\n  } catch (error) {\n    return console.error(error);\n  }\n};\n\nexport default getData;\n","import React, { useContext } from 'react';\n\n// App contexts (states)\nimport { DataContext, SearchContext, SelectionContext } from '../../Store';\n\nconst SearchInput = () => {\n  const [data] = useContext(DataContext);\n  const [search, setSearch] = useContext(SearchContext);\n  const [selection, setSelection] = useContext(SelectionContext);\n\n  const handleChange = event => {\n    let results = [];\n    const { value } = event.target;\n    const locations = data.locations.map(element => element.location);\n\n    if (value.length > 0) {\n      results = locations.filter(element =>\n        element\n          .toLowerCase()\n          .slice(0, value.length)\n          .includes(value.toLowerCase())\n      );\n    }\n\n    setSearch({\n      results,\n      input: value\n    });\n  };\n\n  const openCard = value => {\n    const selected = data.locations.find(element => element.location === value);\n    const checkSelection = selection.locations.find(element => element.location === value);\n\n    if (selected === checkSelection) {\n      setSearch({ ...search, input: 'Already selected!' });\n\n      setTimeout(() => {\n        setSearch({ ...search, input: '' });\n      }, 1500);\n\n      return null;\n    }\n\n    setSelection({ locations: [...selection.locations, selected] });\n    setSearch({ input: '', results: [] });\n  };\n\n  const renderResults = () => {\n    const { results } = search;\n\n    if (results.length > 0) {\n      return (\n        <div className='search__results position-absolute'>\n          {results.map((location, index) => (\n            <div key={index} className='search__result' onClick={() => openCard(location)}>\n              {location}\n            </div>\n          ))}\n        </div>\n      );\n    }\n  };\n\n  return (\n    <>\n      <div className='search position-relative'>\n        <input\n          type='search'\n          placeholder='Enter city name...'\n          className='search__input position-relative'\n          value={search.input}\n          onChange={handleChange}\n        />\n        {renderResults()}\n      </div>\n    </>\n  );\n};\n\nexport default SearchInput;\n","import React, { useContext } from 'react';\n\n// App contexts (states)\nimport { SelectionContext } from '../../Store';\n\n// External packages\nimport moment from 'moment';\n\nconst LocationCard = () => {\n  const [selection, setSelection] = useContext(SelectionContext);\n  const { locations } = selection;\n\n  const closeCard = value => {\n    const selected = locations.find(element => element.location === value);\n    const filteredSelection = locations.filter(element => element !== selected);\n    setSelection({ locations: filteredSelection });\n  };\n\n  return (\n    <div className='cards d-flex'>\n      {locations.length > 0 &&\n        locations.map((element, index) => {\n          return (\n            <div key={index} className='card position-relative'>\n              <div className='card__close position-absolute' onClick={() => closeCard(element.location)}>\n                X\n              </div>\n\n              <p className='card__time text-uppercase'>\n                Updated {moment(element && element.measurements[0].lastUpdated).fromNow()}\n              </p>\n              <p className='card__location'>{element && element.location}</p>\n              <p className='card__city'>in {element && element.city}, United Kingdom</p>\n              <p className='card__measurements'>\n                Values:{' '}\n                {element &&\n                  element.measurements.map((element, index) => {\n                    return (\n                      <span className='parameter' key={index}>\n                        {element.parameter}: {element.value}\n                        <span className='parameter__separator'>,</span>{' '}\n                      </span>\n                    );\n                  })}\n              </p>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default LocationCard;\n","import React, { useEffect, useContext } from 'react';\n\n// App contexts (states)\nimport { DataContext } from './Store';\n\n// App services\nimport getData from './services/airquality';\n\n// App components\nimport SearchInput from './components/Search/Input';\nimport LocationCard from './components/Location/Card';\n\nconst App = () => {\n  const [, setData] = useContext(DataContext);\n\n  // Get the data from the API and update the context's state\n  useEffect(() => {\n    getData('GB', 500)\n      .then(locations => setData({ locations }))\n      .catch(error => console.error(error));\n  }, [setData]);\n\n  return (\n    <div className='main-container d-flex p-20'>\n      <div>\n        <h1 className='text-white text-center'>Compare your Air</h1>\n        <p className='text-white text-center'>Compare the air quality between cities in the UK.</p>\n        <p className='text-white text-center mt-0'>\n          Select cities to compare using the search tool below.\n        </p>\n      </div>\n\n      <SearchInput />\n      <LocationCard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// App components\nimport App from './App';\n\n// App store\nimport Store from './Store';\n\n// App style\nimport './stylesheets/main.scss';\n\n// App services\nimport * as serviceWorker from './services/serviceWorker';\n\nconst Index = () => (\n  <Store>\n    <App />\n  </Store>\n);\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}